第一章 绪论

早期的计算机主要用于数值计算，而现在的计算机主要用于非数值计算，包括对字符，表格和图像等具有一定结构的数据进行处理。这些数据
内容存在着某种联系，只有分清楚数据的内在联系，合理地组织数据，才能对它们进行有效的处理，设计出高效地算法。如何合理地组织数据，
高效处理数据，这就是“数据结构”主要研究的问题。本章简要介绍有关数据结构的基本概念和算法分析方法。

1.1 数据结构的研究内容
计算机用于数值计算时，一般要经过如下几个步骤：首先从具体问题抽象出数学模型，然后设计一个用于此数学模型的算法，最后编写程序，进
行测试，调试，直到解决问题。数据结构主要研究非数值计算问题，非数值计算问题无法用数学方程建立数学模型。

1.2 数据结构的基本概念和术语

1.2.1 数据，数据元素，数据项和数据对象
    数据:客观事物的符号表示，是所有能输入计算机并被计算机程序处理的符号的总称。
    数据元素:数据的基本单位，在计算机中通常作为一个整体进行考虑和处理。
    数据项:是组成数据元素的，有独立含义的，不可分割的最小单位
    数据对象：性质相同的数据元素的集合，是数据的一个子集
1.2.2 数据结构
数据结构是相互之间存在一种或多种特定关系的数据元素的集合。换句话说，数据结构就是带“结构”的数据元素的集合，结构就是指数据元素
之间存在的关系。
    逻辑结构:逻辑结构是从逻辑上描述数据，它与数据的存储无关，是独立于计算机的。因此，数据的逻辑结构可以看成具体问题中抽象出来的数
    学模型。数据的逻辑结构通常有四类基本逻辑结构。
        集合结构:数据元素除了属于同一集合，别无其他关系。
        线性结构：数据元素之间存在一对一的关系。
        树结构：数据元素之间存在一对多的关系。
        图结构：元素之间存在多对多的关系。
    存储结构：数据对象在计算机中的存储表示称为数据的存储结构，也称物理结构。把数据对象存储到计算机中，通常要求既要存储各数据元
    素的数据，又要存储数据源严肃之间的逻辑关系，数据元素在计算机内用一个节点表示。数据元素在计算机中有两种基本的存储结构，分别
    是顺序结构和链式存储结构
        顺序存储结构：顺序存储结构是借助存储器中的相对位置来表示数据元素之间的逻辑关系的，通常借助程序设计语言的数组类型来描述
        链式存储结构：顺序存储结构要求所有的元素依次存放在一片连续的存储空间中，而链式存储结构，无需占用一整块存储空间。但为了
        表示节点之间的关系，需要给每个节点附加指针字段，用于存放后继元素的存储地址。所以链式存储结构通常借助程序设计语言的指针
        类型来描述。
1.2.3 数据类型和抽象数据类型
    数据类型：高级程序语言中的一个基本概念，在程序语言中，每个数据都属于某种数据类型。类型明显地或隐含地规定了数据的取值范围，存储方
    式以及允许进行的运算，数据类型是一个值的集合和定义在这个值集合上的一组操作的总称。C 语言除了提供整型，实型，字符型等基本类型数据
    外，还允许用户自定义各种数据类型，例如数组，结构体和指针等
    抽象数据类型：由用户定义的，包括数据对象，数据对象上关系的集合以及数据对象的基本操作的集合。

1.3抽象数据类型的表示与实现
运用抽象数据类型描述数据结构，有助于在设计软件系统时，不必受限考虑其中包含的数据对象，以及操作在不同处理器中的表示和实现细节，而是
在构成软件系统的每个相对独立的模块上定义一组数据和相应的操作，把这些数据的表示和操作细节留在模块内部解决，在更高层次上进行软件的分析
和设计，从而提高软件的整体性能和利用。
抽象数据类型的概念和面向对象方法的思想是一致的。抽象数据类型独立于具体实现，将数据和操作封装在一起，使得用户程序只能通过抽象数据类型
定义的某些操作来访问其中的数据，从而实现了信息隐藏。
抽象数据类型和类的概念实际上反映了程序和软件设计的两层抽象：抽象数据类型相当于在概念上描述问题，而类相当于在实现层上描述问题。由此看
出，最终表示和实现持续性数据类型，最好用面向对对象的方法


    

