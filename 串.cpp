//串：字符串简称串，计算机上非数值处理的对象基本都是字符串数据。是由零个或多个字符组成的有限序列（空格串不是空串）。串的逻辑结构
//   与线性表相似，区别仅在于串的数据对象限定为字符集

//定长顺序存储表示：用一组地址连续的存储单元存储串值的字符序列。在串的定长顺序存储结构中，为每个串变量分配一个固定长度的存储区，
//               即定长数组
#define maxlen 255
typedef struct{
    char ch[maxlen];
    int length;
}SString;

//堆分配存储：仍然以一组地址连续的存储单元存放串值的字符序列，但他们的存储空间是动态分配的
typedef struct{
    char *ch;
    int length;
}HString;

//在C 语言中，存在一个称为“堆”的自由存储区，并用 malloc（）和 free（）函数来完成动态存储管理。利用 malloc（）为每个新产生
//的串分配一块实际串长所需的存储空间，若分配成功，则返回地址，已分配空间可用 free（）释放掉

//块链存储：类似于线性表的链式存储结构，也可采用链表方式存储串值。由于串的特殊性（每个元素只有一个字符），在具体实现时，每个
//        结点既可以存放一个字符，又可以存放多个字符，每个结点称为块，整个链表称为块链结构，最后一个结点占不满时通常用#补上


//简单的模式匹配算法：子串的定位操作通常称为串的模式匹配，它求的是子串（常称模式串）在主串中的位置，这里采用定长顺序存储结构
int Index(SString S,SString T){
    int i=1,j=1;
    while(i<=S.length && j<=T.length){
        if(S.ch[i]==T.ch[j]){
            ++i,++j;
        }
        else{
            i=i-j+2;
            j=1;
        }
    }
    if(j>T.length)
        return i-T.length;
    else
        return 0;
}